{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dog-paddle","text":"<p>An opinionated guide for Python consumers who are interested in learning Python, writing code, and running scripts or applications.</p>"},{"location":"#consumers-and-producers","title":"Consumers and Producers","text":"<p>Brief description of two broad groups of users</p>"},{"location":"#consumers-creators-makers-and-learners","title":"Consumers - Creators, Makers, and Learners","text":"<p>Consumers focus on using Python and its ecosystem of tools and libraries.</p>"},{"location":"#producers-code-sharers-and-library-maintainers","title":"Producers - Code sharers and Library maintainers","text":"<p>Producers wish to package a project for distribution to others.</p>"},{"location":"#consumers-and-the-user-experience","title":"Consumers and the User Experience","text":"<ul> <li>Cognitive load</li> <li>Too many decisions and options create confusion</li> <li>\"Don't make me think\" design philosophy</li> <li>\"Set me up for success\"</li> <li>Key focus: Installation and usage of Python and its packages</li> <li>Packaging tool authors don't represent the typical consumer</li> </ul>"},{"location":"#producers-and-packaging-tools","title":"Producers and Packaging Tools","text":"<ul> <li>Experience allows them to succeed with more tooling options</li> <li>Packaging tool authors understand the needs of producers</li> <li>Key focus: Distribution of code and libraries</li> </ul>"},{"location":"challenges-today/","title":"Challenges","text":""},{"location":"challenges-today/#developer-driven-solutions","title":"Developer driven solutions","text":""},{"location":"challenges-today/#user-focused-solutions","title":"User focused solutions","text":""},{"location":"challenges-today/#learners-and-creators-have-specific-needs","title":"Learners and Creators have specific needs","text":""},{"location":"challenges-today/#maintainers-and-code-sharers-have-their-own-needs","title":"Maintainers and Code sharers have their own needs","text":""},{"location":"challenges-today/#packaging-tool-maintainers-are-not-the-typical-learner-or-creator","title":"Packaging tool maintainers are not the typical learner or creator","text":"<ul> <li>Additional context from going up the learning curve already</li> </ul>"},{"location":"ideas/","title":"Ideas","text":"<ul> <li>Ralf's packaging topics</li> </ul>"},{"location":"install-python/","title":"How to install Python in 2024","text":""},{"location":"install-python/#official","title":"Official","text":"<ul> <li>Official python.org downloads</li> </ul>"},{"location":"install-python/#options","title":"Options","text":"<ul> <li>Produce reproducible builds of Python - indygreg/python-build-standalone</li> <li>Operating System package managers (apt, brew, chocolatey, etc.)</li> <li>Operating System package store (Windows)</li> <li>pyenv</li> <li>conda/mamba</li> <li>rye and pixi</li> </ul>"},{"location":"install-python/#container-options","title":"Container options","text":"<p>This document is focusing on installing on a personal system.</p>"},{"location":"install-python/#web-based-options","title":"Web-based options","text":"<ul> <li>pyodide</li> <li>pyscript</li> </ul>"},{"location":"pixi-notes/","title":"pixi notes","text":"<p><code>pixi run start</code></p> <ul> <li>install conda packages fast</li> <li>reproducible isolated</li> </ul> <p>by Prefix.dev</p>"},{"location":"pixi-notes/#multiplatform","title":"Multiplatform","text":"<p>Windows, MacOS, Linux</p>"},{"location":"pixi-notes/#conda-and-pypi-packages","title":"Conda and PyPI packages","text":"<p>Ecosystems</p> <p>Building on top of conda ecosystem.</p> <p><code>pixi init &lt;folder name&gt;</code></p> <p><code>pixi add python</code></p> <p><code>pixi run python</code></p>"},{"location":"rye-notes/","title":"Rye notes","text":""},{"location":"rye-notes/#remove-pyenv-and-use-rye","title":"Remove pyenv and use rye","text":""},{"location":"rye-notes/#set-up-a-learning-system","title":"Set up a learning system","text":""},{"location":"rye-notes/#set-a-global-python","title":"Set a global python","text":"<p>rye config --set-bool behavior.global-python=true</p>"},{"location":"rye-notes/#set-up-some-global-tools-science-prototyping","title":"Set up some global tools (science prototyping)","text":"<pre><code>rye tools install ipython\nrye tools install jupyter\nrye tools install notebook\n</code></pre>"},{"location":"rye-notes/#check-which-global-tools-are-installed","title":"Check which global tools are installed","text":"<pre><code>rye tools list --include-scripts --include-version\n# or\nrye tools list -v -s\n</code></pre>"},{"location":"rye-notes/#run-a-script-like-ipython","title":"Run a script like ipython","text":"<pre><code>rye run ipython\n# or \nipython\n</code></pre>"},{"location":"rye-notes/#start-a-new-project-which-i-want-to-share","title":"Start a new project (which I want to share)","text":"<pre><code>rye init\n</code></pre>"},{"location":"rye-notes/#start-a-virtual-project-just-using-stuff-not-pypi-package","title":"Start a virtual project (just using stuff not pypi package)","text":"<pre><code>rye init --virtual\nrye add mkdocs\nrye sync\nrye run mkdocs\n</code></pre>"},{"location":"rye-notes/#nice-to-have","title":"Nice to have","text":""},{"location":"rye-notes/#install-completion-for-rye","title":"Install completion for rye","text":""},{"location":"rye-notes/#make-sure-zfunc-is-added-to-fpath-before-compinit","title":"Make sure ~/.zfunc is added to fpath, before compinit.","text":"<p>rye self completion -s zsh &gt; ~/.zfunc/_rye</p> <p>Then add to <code>.zshrc</code> before init modules (if using zimfw):  <code>fpath=(~/.zsh $fpath)</code></p>"},{"location":"rye-notes/#things-to-check","title":"Things to check","text":"<ul> <li>conda</li> <li>mamba</li> <li>pixi</li> </ul>"},{"location":"rye-notes/#questions","title":"Questions","text":"<ul> <li>If you update <code>rye self update</code>, do you need to do a <code>rye sync</code> when you enter a project again? On mac, can I ditch homebrew to install Python?</li> </ul>"},{"location":"unique-opportunity/","title":"Unique opportunity","text":"<p>A decade ago we were facing the Python 2 to 3 transition. To support science needs, conda was created. Packaging has come a long way from 10 years ago.</p>"},{"location":"unique-opportunity/#meet-the-needs-of-consumers","title":"Meet the Needs of Consumers","text":"<p>Focus here first to grow Python and its ecosystem. The solution is not one tool but one approach to simplify getting started. Users need fewer decisions to make.</p>"},{"location":"unique-opportunity/#how-to-reduce-decisions-when-starting","title":"How to reduce decisions when starting","text":"<ul> <li>One tool to do it all - unlikely since we have a variety of tools each serving a different purpose or group of users</li> <li>Create a higher level abstraction that hides the decisions in a lower layer<ul> <li>No magic</li> <li>A way to understand and introspect what has or will be done to their system</li> </ul> </li> </ul>"},{"location":"users-consumers/","title":"Consumers: Creators, Makers, and Learners","text":"<p>Users want to learn Python and create applications for personal use.</p>"},{"location":"users-consumers/#basics","title":"Basics","text":""},{"location":"users-consumers/#start-simple-and-grow","title":"Start simple and grow","text":"<ol> <li>Abby: <code>install python</code></li> <li>Betty: <code>install python and add a favorite tool</code></li> <li>Chris: <code>create new project with python and consume some packages</code></li> <li>Donna: <code>use an existing project and modify it for my needs</code> </li> </ol>"},{"location":"users-consumers/#user-stories-by-increasing-needs","title":"User Stories by Increasing Needs","text":""},{"location":"users-consumers/#abby-new-to-python-and-new-to-programming","title":"Abby: New to Python and New to Programming","text":"<ul> <li>Need to install Python</li> <li>Try the REPL</li> <li>Write a simple script</li> </ul>"},{"location":"users-consumers/#betty-add-an-improved-repl-for-learning","title":"Betty: Add an improved REPL for learning","text":"<ul> <li>Need to install Python </li> <li>Try the REPL</li> <li>Write a simple script</li> <li>Plus install IPython</li> </ul>"},{"location":"users-consumers/#chris-create-a-new-project-but-not-sharing-it-on-pypi","title":"Chris: Create a new project but not sharing it on PyPI","text":"<ul> <li>Install Python</li> <li>Add dependencies</li> <li>Write code</li> <li>Run the project</li> <li>Add optional dependencies for docs and tests</li> </ul>"},{"location":"users-consumers/#donna-use-an-existing-project-that-was-cloned-from-github","title":"Donna: Use an existing project that was cloned from GitHub","text":"<ul> <li>Clone an existing project</li> <li>Install Python</li> <li>Install dependencies</li> <li>Run the project</li> <li>Install optional dependencies for docs and tests</li> <li>Modify project by adding additional dependencies</li> </ul>"},{"location":"users-producers/","title":"Producers: Library Creators and Code Sharers","text":"<p>Package creation needed.</p> <p>For example, these user personas need to share a package with team members or PyPI/conda forge.</p> <p>Serves all package creators to advanced library maintainers</p>"},{"location":"users-producers/#erin-create-a-new-project-that-you-want-to-share","title":"Erin: Create a new project that you want to share","text":""},{"location":"users-producers/#francis-share-an-existing-project-on-pypi-or-conda-forge","title":"Francis: Share an existing project on PyPI or conda forge","text":""},{"location":"windows/","title":"Windows and Python","text":"<p>https://realpython.com/python-coding-setup-windows/</p> <p>Install Windows Terminal from the Windows store.</p> <p>Install Powershell 7.4.2</p>"},{"location":"windows/#try-pixi","title":"Try pixi","text":"<p><code>iwr -useb https://pixi.sh/install.ps1 | iex</code></p> <p><code>New-Item -Path $PROFILE -ItemType File -Force</code></p>"}]}